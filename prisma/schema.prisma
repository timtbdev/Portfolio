// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Project {
  id          String     @id @default(cuid())
  title       String
  icon        String?
  url         String?
  screenshot  String?
  tags        Tag[]
  categories  Category[]
  components  String?    @db.Text
  libraries   String?    @db.Text
  backend     String?    @db.Text
  publishedAt DateTime   @default(now()) @map(name: "published_at") @db.Date
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map(name: "updated_at")
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@map("projects")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  projects  Project[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  posts     Post[]
  contents  Content[]

  @@map(name: "users")
}

model Post {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  image        String?
  imageCaption String?
  content      Json?
  published    Boolean    @default(false)
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  tags         Tag[]
  categories   Category[]

  @@index([authorId])
  @@map(name: "posts")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  projects  Project[]
  posts     Post[]

  @@map(name: "tags")
}

model Category {
  id        String    @id @default(cuid())
  title     String    @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  projects  Project[]
  posts     Post[]

  @@map(name: "categories")
}

model Content {
  id           String   @id @default(cuid())
  title        String
  image        String?
  imageCaption String?
  type         String?
  description  String?  @db.Text
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String

  @@index([authorId])
  @@map(name: "contents")
}
