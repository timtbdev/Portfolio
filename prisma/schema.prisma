// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Project {
  id          String              @id @default(cuid())
  title       String
  icon        String?
  url         String?
  screenshot  String?
  tags        TagOnProject[]
  features    Feature[]
  categories  CategoryOnProject[]
  publishedAt DateTime            @default(now()) @map(name: "published_at") @db.Date
  createdAt   DateTime            @default(now()) @map(name: "created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map(name: "updated_at")
  author      User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@map("projects")
}

model Feature {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@index([projectId])
  @@map("features")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  projects  Project[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  posts     Post[]
  pages     Page[]
  socials   Social[]

  @@map(name: "users")
}

model Post {
  id           String           @id @default(cuid())
  title        String
  description  String?          @db.Text
  image        String?
  imageCaption String?
  content      Json?
  published    Boolean          @default(false)
  createdAt    DateTime         @default(now()) @map(name: "created_at")
  updatedAt    DateTime         @default(now()) @map(name: "updated_at")
  author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  tags         TagOnPost[]
  categories   CategoryOnPost[]

  @@index([authorId])
  @@map(name: "posts")
}

model TagOnPost {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@index([postId])
  @@map(name: "tags_on_posts")
}

model TagOnProject {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@index([projectId])
  @@map(name: "tags_on_projects")
}

model CategoryOnProject {
  id        String   @id @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  projects Project[]

  @@map(name: "categories_on_project")
}

model CategoryOnPost {
  id        String   @id @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  posts Post[]

  @@map(name: "categories_on_post")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  image     String?
  type      String   @default("about")
  order     Int?
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@index([authorId])
  @@map(name: "pages")
}

model Social {
  id          String   @id @default(cuid())
  title       String
  description String?
  address     String?
  url         String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@map(name: "socials")
}
